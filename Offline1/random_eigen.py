# -*- coding: utf-8 -*-
"""random_eigen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14RlvZ1iDBhKH4dfZYBcN-CdQKDAn3Qvf
"""

import numpy as np

def generate_invertible_matrix(n):
    # Generate a random n x n matrix with integer entries
    random_matrix = np.random.randint(low=1, high=10, size=(n, n))

    # Check if the matrix is invertible
    while np.linalg.matrix_rank(random_matrix) < n:
        random_matrix = np.random.randint(low=1, high=10, size=(n, n))

    return random_matrix

# Take the dimension 'n' as input
n = int(input("Enter the dimension 'n' of the matrix: "))

# Generate the random invertible matrix
invertible_matrix = generate_invertible_matrix(n)

print("Random Invertible Matrix A:")
print(invertible_matrix)

eigen_values, eigen_vectors = np.linalg.eig(invertible_matrix)

print("\nEigen Values:")
print(eigen_values)
print("\nEigen Vectors:")
print(eigen_vectors)

diag_lambda = np.diag(eigen_values)
re_1 = eigen_vectors.dot(diag_lambda)
reconstructed_invertible_matrix = re_1.dot(np.linalg.inv(eigen_vectors)) # A = V.diag(lambda).V_inv
print("\nReconstructed Random Invertible Matrix:")
print(reconstructed_invertible_matrix)

are_matrices_equal = np.allclose(invertible_matrix, reconstructed_invertible_matrix)

if are_matrices_equal:
    print("\nThe matrices are equal.")
else:
    print("\nThe matrices are not equal.")
