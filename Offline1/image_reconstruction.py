# -*- coding: utf-8 -*-
"""image_reconstruction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rQjWF_gVPumVMcatvbGF8ENTev4YFDQY
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt

# Load the image from file
image_path = 'image.jpg'
original_image = cv2.imread(image_path)

# Convert the image to grayscale
gray_image = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)

# Resize the image to lower dimensions (e.g., 500 pixels)
resized_image = cv2.resize(gray_image, (300, 500))

dimensions = resized_image.shape[:2]
n, m = dimensions
min_n_m = min(n, m)

print("width, m = ", m)
print("height, n = ", n)
print("min_n_m = ", min_n_m)



# Display the original and processed images
plt.figure(figsize=(10, 5))

plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')

plt.subplot(1, 3, 2)
plt.imshow(gray_image, cmap='gray')
plt.title('Grayscale Image')

plt.subplot(1, 3, 3)
plt.imshow(resized_image, cmap='gray')
plt.title('Resized Image')

plt.show()


A = resized_image
#print(A.shape)

# Perform Singular Value Decomposition
U, S, Vt = np.linalg.svd(A)

# U: Left singular vectors
# S: Singular values (diagonal matrix)
# Vt: Transpose of right singular vectors

# Print the results
print("\n Matrix U (Left Singular Vectors):")
print(U)

print("\nSingular Values (Diagonal Matrix S):")
print(np.diag(S))

print("\nMatrix Vt (Transpose of Right Singular Vectors):")
print(Vt)

def low_rank_approximation(A, k):
    # Truncate to the top k singular values and vectors
    U_k = U[:, :k]
    S_k = np.diag(S[:k])
    Vt_k = Vt[:k, :]

    # Compute the k-rank approximation
    A_k = np.dot(U_k, np.dot(S_k, Vt_k))

    return A_k

for k in range(1, min_n_m, int(min_n_m/15)):
    # Get the k-rank approximation of matrix A
    A_k = low_rank_approximation(A, k)

    plt.imshow(A_k, cmap='gray')
    plt.title(f'k = {k}')

    plt.show()

# finding the lowest value of k for reading author's name clearly
for k in range(21, 41, 1):
    # Get the k-rank approximation of matrix A
    A_k = low_rank_approximation(A, k)

    plt.imshow(A_k, cmap='gray')
    plt.title(f'k = {k}')

    plt.show()

lowest_val_k = 35  # to read the author name clearly
print("\nlowest value of k = ", lowest_val_k)

